format = "tibble"
swtich(
format,
"string", httr2::resp_body_string(result),
"tibble", as_tibble(result),
"JSON", httr2::resp_body_json(result)
)
switch(
format,
"string", httr2::resp_body_string(result),
"tibble", as_tibble(result),
"JSON", httr2::resp_body_json(result)
)
format
switch(
format,
"string", httr2::resp_body_string(result),
"tibble", tibble::as_tibble(result),
"JSON", httr2::resp_body_json(result)
)
switch(
format,
"string" = httr2::resp_body_string(result),
"tibble"= tibble::as_tibble(result),
"JSON"= httr2::resp_body_json(result)
)
json_to_tibble <- \(x) {
JSON |>
pluck("data", "data") |>
as_tibble()
}
switch(
format,
"string" = httr2::resp_body_string(result),
"tibble"= json_to_tibble(result),
"JSON"= httr2::resp_body_json(result)
)
tibble::as_tibble()
json_to_tibble <- \(x) {
JSON |>
dplyr::pluck("data", "data") |>
tibble::as_tibble()
}
switch(
format,
"string" = httr2::resp_body_string(result),
"tibble"= json_to_tibble(result),
"JSON"= httr2::resp_body_json(result)
)
tidyr::pluck("data", "data")
json_to_tibble <- \(x) {
JSON |>
purrr::pluck("data", "data") |>
tibble::as_tibble()
}
switch(
format,
"string" = httr2::resp_body_string(result),
"tibble"= json_to_tibble(result),
"JSON"= httr2::resp_body_json(result)
)
json_to_tibble <- \(JSON) {
JSON |>
purrr::pluck("data", "data") |>
tibble::as_tibble()
}
json_to_tibble <- \(x) {
httr2::resp_body_json(x) |>
purrr::pluck("data", "data") |>
tibble::as_tibble()
}
switch(
format,
"string" = httr2::resp_body_string(result),
"tibble"= json_to_tibble(result),
"JSON"= httr2::resp_body_json(result)
)
json_to_tibble(result)
httr2::resp_body_json(result) |>
purrr::pluck("data", "data")
httr2::resp_body_json(result) |>
purrr::pluck(1, "data", "data") |>
tibble::as_tibble()
httr2::resp_body_json(result) |>
purrr::pluck("data", "data") |>
listviewer::jsonedit()
httr2::resp_body_json(result) |>
purrr::pluck("data", "data", 1) |>
listviewer::jsonedit()
httr2::resp_body_json(result) |>
purrr::pluck(1, "data", "data")
httr2::resp_body_json(result) |>
purrr::pluck("data")
httr2::resp_body_json(result) |>
purrr::pluck("data") |>
listviewer::jsonedit()
httr2::resp_body_json(result) |>
purrr::pluck("data", "data") |>
listviewer::jsonedit()
httr2::resp_body_json(result) |>
purrr::pluck("data", "data")
httr2::resp_body_json(result) |>
purrr::pluck("data", "data") |>
tibble::as_tibble()
httr2::resp_body_json(result) |>
purrr::pluck("data", "data") |>
tibble::tibble()
json_to_tibble <- \(x) {
httr2::resp_body_json(result) |>
purrr::pluck("data", "data")
}
httr2::resp_body_json(result) |>
purrr::pluck("data", "data") %>%
map(as_tibble)
httr2::resp_body_json(result) |>
purrr::pluck("data", "data") |>
map(as_tibble)
httr2::resp_body_json(result) |>
purrr::pluck("data", "data") |>
purrr::map(as_tibble)
httr2::resp_body_json(result) |>
purrr::pluck("data", "data") |>
purrr::map(tibble::as_tibble)
httr2::resp_body_json(result) |>
purrr::pluck("data", "data") |>
purrr::map_dfr(tibble::as_tibble)
httr2::resp_body_json(result) |>
purrr::pluck("data", "data") |>
purrr::map_dfr(tibble::as_tibble) %>%
dplyr::mutate(dplyr::across(dplyr::contains("Date"), ~ as.POSIXct(., origin = "1970-01-01", tz = "Aisa/shanghai")))
httr2::resp_body_json(result) |>
purrr::pluck("data", "data") |>
purrr::map_dfr(tibble::as_tibble) |>
dplyr::mutate(dplyr::across(dplyr::contains("Date"), ~ as.POSIXct(., origin = "1970-01-01", tz = "Aisa/shanghai")))
httr2::resp_body_json(result) |>
purrr::pluck("data", "data") |>
purrr::map_dfr(tibble::as_tibble) |>
dplyr::mutate(dplyr::across(dplyr::contains("Date"), ~ as.POSIXct(., origin = "1970-01-01", tz = "Aisa/Shanghai")))
httr2::resp_body_json(result) |>
purrr::pluck("data", "data") |>
purrr::map_dfr(tibble::as_tibble) |>
dplyr::mutate(dplyr::across(dplyr::contains("Date"), ~ as.POSIXct(., origin = "1970-01-01", tz = 'Asia/Shanghai')))
json_to_tibble <- \(x) {
httr2::resp_body_json(x) |>
purrr::pluck("data", "data") |>
purrr::map_dfr(tibble::as_tibble) |>
dplyr::mutate(dplyr::across(dplyr::contains("Date"), ~ as.POSIXct(., origin = "1970-01-01", tz = 'Asia/Shanghai')))
}
styler:::style_active_file()
styler:::style_active_file()
styler:::style_active_file()
styler:::style_active_file()
format = "d"
switch(format,
"string" = httr2::resp_body_string(result),
"tibble" = json_to_tibble(result),
"JSON" = httr2::resp_body_json(result),
stop("Only three avilable output formats for the results: JSON, tibble or string")
)
engine <- V8::v8()
engine$source("./inst/js/crypto-js.js")
engine$source("./inst/js/signature.js")
signature <- purrr::possibly(
\(json, url = "/v2/threads/search?sortType=0") {
engine$eval(sprintf('var e = "%s";', url))
engine$call("generate_signature", json)
},
otherwise = message("\tload signature functions failed.")
)
json_to_tibble <- \(x) {
httr2::resp_body_json(x) |>
purrr::pluck("data", "data") |>
purrr::map_dfr(tibble::as_tibble) |>
dplyr::mutate(dplyr::across(dplyr::contains("Date"), ~ as.POSIXct(., origin = "1970-01-01", tz = "Asia/Shanghai")))
}
keyword_search <- purrr::possibly(
\(keywords = keywords, page = 1, rows = 50, format = "tibble") {
param <- sprintf(
'{"position":0,"keywords":"%s","fid":null,"domainId":null,"typeId":null,"timeRange":null,"ansChecked":false,"stTime":null,"sortType":"0","page":%s,"rows":%s}',
keywords,
page,
rows
)
result <- "https://liuyan.people.com.cn/v2/threads/search?sortType=0" |>
httr2::request() |>
httr2::req_headers(
`Accept` = "application/json, text/plain, */*",
`Accept-Language` = "zh-CN",
`Content-Type` = "application/json;charset=UTF-8",
`Origin` = "https://liuyan.people.com.cn",
`Referer` = "https://liuyan.people.com.cn/messageSearch",
`Sec-Fetch-Dest` = "empty",
`Sec-Fetch-Mode` = "cors",
`Sec-Fetch-Site` = "same-origin",
`User-Agent` = "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36",
`sec-ch-ua` = '"Not_A Brand";v="8", "Chromium";v="120", "Google Chrome";v="120"',
`sec-ch-ua-mobile` = "?0",
`sec-ch-ua-platform` = '"Windows"',
`token` = ""
) |>
httr2::req_retry(
max_tries = 3,
max_seconds = 60,
backoff = ~5
) |>
httr2::req_body_raw(
sprintf('{"appCode":"PC42ce3bfa4980a9","token":"","signature":"%s","param":"{\\"position\\":0,\\"keywords\\":\\"%s\\",\\"fid\\":null,\\"domainId\\":null,\\"typeId\\":null,\\"timeRange\\":null,\\"ansChecked\\":false,\\"stTime\\":null,\\"sortType\\":\\"0\\",\\"page\\":%s,\\"rows\\":%s}"}', signature(param), keywords, page, rows)
) |>
httr2::req_perform()
if (httr2::resp_status(result) == 200) {
switch(format,
"string" = httr2::resp_body_string(result),
"tibble" = json_to_tibble(result),
"JSON" = httr2::resp_body_json(result),
stop("Only three avilable output formats for the results: JSON, tibble or string")
)
} else {
stop("\terror occurs!")
}
}
)
keyword_search(keywords = "上访")
engine <- V8::v8()
engine$source("./inst/js/crypto-js.js")
engine$source("./inst/js/signature.js")
signature <- purrr::possibly(
\(json, url = "/v2/threads/search?sortType=0") {
engine$eval(sprintf('var e = "%s";', url))
engine$call("generate_signature", json)
},
otherwise = message("\tload signature functions failed.")
)
json_to_tibble <- \(x) {
httr2::resp_body_json(x) |>
purrr::pluck("data", "data") |>
purrr::map_dfr(tibble::as_tibble) |>
dplyr::mutate(dplyr::across(dplyr::contains("Date"), ~ as.POSIXct(., origin = "1970-01-01", tz = "Asia/Shanghai")))
}
keyword_search <- purrr::possibly(
\(keywords = keywords, page = 1, rows = 50, format = "tibble", sleep = sample(seq(1, 2, 0.05), 1)) {
param <- sprintf(
'{"position":0,"keywords":"%s","fid":null,"domainId":null,"typeId":null,"timeRange":null,"ansChecked":false,"stTime":null,"sortType":"0","page":%s,"rows":%s}',
keywords,
page,
rows
)
result <- "https://liuyan.people.com.cn/v2/threads/search?sortType=0" |>
httr2::request() |>
httr2::req_headers(
`Accept` = "application/json, text/plain, */*",
`Accept-Language` = "zh-CN",
`Content-Type` = "application/json;charset=UTF-8",
`Origin` = "https://liuyan.people.com.cn",
`Referer` = "https://liuyan.people.com.cn/messageSearch",
`Sec-Fetch-Dest` = "empty",
`Sec-Fetch-Mode` = "cors",
`Sec-Fetch-Site` = "same-origin",
`User-Agent` = "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36",
`sec-ch-ua` = '"Not_A Brand";v="8", "Chromium";v="120", "Google Chrome";v="120"',
`sec-ch-ua-mobile` = "?0",
`sec-ch-ua-platform` = '"Windows"',
`token` = ""
) |>
httr2::req_retry(
max_tries = 3,
max_seconds = 60,
backoff = ~5
) |>
httr2::req_body_raw(
sprintf('{"appCode":"PC42ce3bfa4980a9","token":"","signature":"%s","param":"{\\"position\\":0,\\"keywords\\":\\"%s\\",\\"fid\\":null,\\"domainId\\":null,\\"typeId\\":null,\\"timeRange\\":null,\\"ansChecked\\":false,\\"stTime\\":null,\\"sortType\\":\\"0\\",\\"page\\":%s,\\"rows\\":%s}"}', signature(param), keywords, page, rows)
) |>
httr2::req_perform()
Sys.sleep(sleep)
if (httr2::resp_status(result) == 200) {
switch(format,
"string" = httr2::resp_body_string(result),
"tibble" = json_to_tibble(result),
"JSON" = httr2::resp_body_json(result),
stop("Only three avilable output formats for the results: JSON, tibble or string")
)
} else {
stop("\terror occurs!")
}
}
)
keyword_search(keywords = "上访")
keyword_search(keywords = "台湾")
keyword_search(keywords = "烂尾")
engine <- V8::v8()
engine$source("./inst/js/crypto-js.js")
engine$source("./inst/js/signature.js")
signature <- purrr::possibly(
\(json, url = "/v2/threads/search?sortType=0") {
engine$eval(sprintf('var e = "%s";', url))
engine$call("generate_signature", json)
},
otherwise = message("\tload signature functions failed.")
)
json_to_tibble <- \(x) {
httr2::resp_body_json(x) |>
purrr::pluck("data", "data") |>
purrr::map_dfr(tibble::as_tibble) |>
dplyr::mutate(dplyr::across(dplyr::contains("Date"), ~ as.POSIXct(., origin = "1970-01-01", tz = "Asia/Shanghai")))
}
keyword_search <- purrr::possibly(
\(keywords = keywords, page = 1, rows = 50, format = "tibble", sleep = sample(seq(1, 2, 0.05), 1)) {
param <- sprintf(
'{"position":0,"keywords":"%s","fid":null,"domainId":null,"typeId":null,"timeRange":null,"ansChecked":false,"stTime":null,"sortType":"0","page":%s,"rows":%s}',
keywords,
page,
rows
)
result <- "https://liuyan.people.com.cn/v2/threads/search?sortType=0" |>
httr2::request() |>
httr2::req_headers(
`Accept` = "application/json, text/plain, */*",
`Accept-Language` = "zh-CN",
`Content-Type` = "application/json;charset=UTF-8",
`Origin` = "https://liuyan.people.com.cn",
`Referer` = "https://liuyan.people.com.cn/messageSearch",
`Sec-Fetch-Dest` = "empty",
`Sec-Fetch-Mode` = "cors",
`Sec-Fetch-Site` = "same-origin",
`User-Agent` = "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36",
`sec-ch-ua` = '"Not_A Brand";v="8", "Chromium";v="120", "Google Chrome";v="120"',
`sec-ch-ua-mobile` = "?0",
`sec-ch-ua-platform` = '"Windows"',
`token` = ""
) |>
httr2::req_retry(
max_tries = 3,
max_seconds = 60,
backoff = ~5
) |>
httr2::req_body_raw(
sprintf('{"appCode":"PC42ce3bfa4980a9","token":"","signature":"%s","param":"{\\"position\\":0,\\"keywords\\":\\"%s\\",\\"fid\\":null,\\"domainId\\":null,\\"typeId\\":null,\\"timeRange\\":null,\\"ansChecked\\":false,\\"stTime\\":null,\\"sortType\\":\\"0\\",\\"page\\":%s,\\"rows\\":%s}"}', signature(param), keywords, page, rows)
) |>
httr2::req_perform()
Sys.sleep(sleep)
if (httr2::resp_status(result) == 200) {
switch(format,
"string" = httr2::resp_body_string(result),
"tibble" = json_to_tibble(result),
"JSON" = httr2::resp_body_json(result),
stop("Only three avilable output formats for the results: JSON, tibble or string")
)
} else {
stop("\terror occurs!")
}
}
)
keyword_search("烂尾楼")
library(LLMB)
library(LLMB)
??LLMB::keyword_search()
?LLMB::keyword_search()
library(LLMB)
library(LLMB)
styler:::style_active_file()
library(LLMB)
library(LLMB)
keyword_search("上访")
keyword_search("上访")
library(LLMB)
cryptojs_env <- new.env(parent = emptyenv())
cryptojs_env <- new.env(parent = emptyenv())
cryptojs_env$engine <- V8::v8()
cryptojs_env$engine$source("./inst/js/crypto-js.js")
cryptojs_env$engine$source("./inst/js/signature.js")
cryptojs_env$signature <- purrr::possibly(
\(json, url = "/v2/threads/search?sortType=0") {
cryptojs_env$engine$eval(sprintf('var e = "%s";', url))
cryptojs_env$engine$call("generate_signature", json)
},
otherwise = message("\tload signature functions failed.")
)
cryptojs_env$json_to_tibble <- \(x) {
httr2::resp_body_json(x) |>
purrr::pluck("data", "data") |>
purrr::map_dfr(tibble::as_tibble) |>
dplyr::mutate(dplyr::across(dplyr::contains("Date"), ~ as.POSIXct(., origin = "1970-01-01", tz = "Asia/Shanghai")))
}
assign(".cryptojs_env", cryptojs_env, envir = as.environment(pkgname))
cryptojs_env$engine <- V8::v8()
cryptojs_env$engine$source("./inst/js/crypto-js.js")
cryptojs_env$engine$source("./inst/js/signature.js")
cryptojs_env$signature <- purrr::possibly(
\(json, url = "/v2/threads/search?sortType=0") {
cryptojs_env$engine$eval(sprintf('var e = "%s";', url))
cryptojs_env$engine$call("generate_signature", json)
},
otherwise = message("\tload signature functions failed.")
)
cryptojs_env$json_to_tibble <- \(x) {
httr2::resp_body_json(x) |>
purrr::pluck("data", "data") |>
purrr::map_dfr(tibble::as_tibble) |>
dplyr::mutate(dplyr::across(dplyr::contains("Date"), ~ as.POSIXct(., origin = "1970-01-01", tz = "Asia/Shanghai")))
}
assign(".cryptojs_env", cryptojs_env, envir = as.environment("LLMB"))
assign(".cryptojs_env", cryptojs_env, envir = as.environment(LLMB))
.onLoad <- function(libname, pkgname) {
cryptojs_env <- new.env(parent = emptyenv())
cryptojs_env$engine <- V8::v8()
cryptojs_env$engine$source("./inst/js/crypto-js.js")
cryptojs_env$engine$source("./inst/js/signature.js")
cryptojs_env$signature <- purrr::possibly(
\(json, url = "/v2/threads/search?sortType=0") {
cryptojs_env$engine$eval(sprintf('var e = "%s";', url))
cryptojs_env$engine$call("generate_signature", json)
},
otherwise = message("\tload signature functions failed.")
)
cryptojs_env$json_to_tibble <- \(x) {
httr2::resp_body_json(x) |>
purrr::pluck("data", "data") |>
purrr::map_dfr(tibble::as_tibble) |>
dplyr::mutate(dplyr::across(dplyr::contains("Date"), ~ as.POSIXct(., origin = "1970-01-01", tz = "Asia/Shanghai")))
}
assign(".cryptojs_env", cryptojs_env, envir = as.environment(pkgname))
message("crypto-js has been loaded into R.")
}
cryptojs_env$signature(param)
keywords = "上访"
page = 1
rows = 50
get(".cryptojs_env", envir = as.environment("LLMB"))
get(".cryptojs_env")
cryptojs_env$engine$source("./inst/js/signature.js")
cryptojs_env$signature <- purrr::possibly(
\(json, url = "/v2/threads/search?sortType=0") {
cryptojs_env$engine$eval(sprintf('var e = "%s";', url))
cryptojs_env$engine$call("generate_signature", json)
},
otherwise = message("\tload signature functions failed.")
)
cryptojs_env$json_to_tibble <- \(x) {
httr2::resp_body_json(x) |>
purrr::pluck("data", "data") |>
purrr::map_dfr(tibble::as_tibble) |>
dplyr::mutate(dplyr::across(dplyr::contains("Date"), ~ as.POSIXct(., origin = "1970-01-01", tz = "Asia/Shanghai")))
}
assign(".cryptojs_env", cryptojs_env, envir = as.environment(pkgname))
message("crypto-js has been loaded into R.")
.onLoad <- function(libname, pkgname) {
cryptojs_env <- new.env(parent = emptyenv())
cryptojs_env$engine <- V8::v8()
cryptojs_env$engine$source("./inst/js/crypto-js.js")
cryptojs_env$engine$source("./inst/js/signature.js")
cryptojs_env$signature <- purrr::possibly(
\(json, url = "/v2/threads/search?sortType=0") {
cryptojs_env$engine$eval(sprintf('var e = "%s";', url))
cryptojs_env$engine$call("generate_signature", json)
},
otherwise = message("\tload signature functions failed.")
)
cryptojs_env$json_to_tibble <- \(x) {
httr2::resp_body_json(x) |>
purrr::pluck("data", "data") |>
purrr::map_dfr(tibble::as_tibble) |>
dplyr::mutate(dplyr::across(dplyr::contains("Date"), ~ as.POSIXct(., origin = "1970-01-01", tz = "Asia/Shanghai")))
}
assign(".cryptojs_env", cryptojs_env, envir = as.environment(pkgname))
message("crypto-js has been loaded into R.")
}
.onLoad <- function(libname, pkgname) {
cryptojs_env <- new.env(parent = emptyenv())
cryptojs_env$engine <- V8::v8()
cryptojs_env$engine$source("./inst/js/crypto-js.js")
cryptojs_env$engine$source("./inst/js/signature.js")
cryptojs_env$signature <- purrr::possibly(
\(json, url = "/v2/threads/search?sortType=0") {
cryptojs_env$engine$eval(sprintf('var e = "%s";', url))
cryptojs_env$engine$call("generate_signature", json)
},
otherwise = message("\tload signature functions failed.")
)
cryptojs_env$json_to_tibble <- \(x) {
httr2::resp_body_json(x) |>
purrr::pluck("data", "data") |>
purrr::map_dfr(tibble::as_tibble) |>
dplyr::mutate(dplyr::across(dplyr::contains("Date"), ~ as.POSIXct(., origin = "1970-01-01", tz = "Asia/Shanghai")))
}
assign(".cryptojs_env", cryptojs_env, envir = as.environment(pkgname))
message("crypto-js has been loaded into R.")
}
library(LLMB)
library(LLMB)
search_keyword("上访")
LLMB::keyword_search("上访")
LLMB::keyword_search("上访")
library(LLMB)
LLMB::keyword_search("上访")
library(LLMB)
library(LLMB)
library(LLMB)
LLMB::keyword_search("上访")
system.file("js/crypto-js.js", package = pkgname)
library(LLMB)
library(LLMB)
library(LLMB)
library(LLMB)
library(LLMB)
library(LLMB)
keyword_search("烂尾")
library(LLMB)
keyword_search("烂尾")
library(LLMB)
library(LLMB)
cryptojs_env
library(LLMB)
cryptojs_env
